var TOKENS = require('tokens');
var Dropbox = require('dropbox-datastores');

var Loggr = function() {
    var datastoreManager = (new Dropbox.Client({token: TOKENS.DROPBOX})).getDatastoreManager();
    datastoreManager.openDefaultDatastore(initDatastore.bind(this));
}

Loggr.prototype.getYTD = function(query) {
    var metrics = {};
    var self = this;
    this.categories.query(query).forEach(function(cat) {
        var categoryEntries = cat.get("entries").toArray();
        var total = categoryEntries.reduce(
            function(p, c) { 
                return self.entries.get(c).get("value") + p; 
            }, 0);
        metrics[cat.get("name")] = parseInt(total);
    });
    return metrics;
};

Loggr.prototype.getToday = function(query) {
    var currentDay = new Date();
    currentDay.setHours(0,0,0,0);
    return this.getSumFromDate(query, currentDay);
};

Loggr.prototype.getYTD = function(query) {
    var currentYear = new Date();
    currentYear.setMonth(0,1);
    currentYear.setHours(0,0,0,0);
    return this.getSumFromDate(query, currentYear);
}

var initDatastore = function(error, datastore) {
    this.ds = datastore;
    this.entries = this.ds.getTable("entries");
    this.groups = this.ds.getTable("groups");
    this.categories = this.ds.getTable("categories");
}

Loggr.prototype.getSumFromDate = function(query, dateLimit) {
    var category = this.categories.query(query)[0];
    if (!category) return null;
    var entriesList = category.get("entries");
    if (entriesList.length() == 0) return 0;

    var self = this;
    return entriesList.toArray().reduce(function(p, c) {
        var entry = self.entries.get(c);
        return (entry.get("date") > dateLimit) ? entry.get("value") + p : 0;
    }, 0);
}

module.exports = Loggr;

/* Datastore Description
 * number of datastores: 1
 * use: default
 * table names:
 *  categories - metric name (Time At Zendesk, Transport Distance)
 *  entries - metric entry
 *  groups - groups of metrics (Diet, Fitness)
 *
 *  categories:
 *      id
 *      intervalPreference
 *      group
 *      name
 *      dataType
 *      entries
 *      updatedAt
 *      graphPreference
 *      createdAt
 *  entries
 *      id
 *      category
 *      date
 *      value
 *  groups
 *      id
 *      groupType
 *      name
 *      image
 *      categories
 *      updatedAt
 *      createdAt
 */
