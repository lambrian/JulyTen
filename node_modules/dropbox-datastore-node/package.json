{
  "name": "dropbox-datastore-node",
  "version": "0.2.0",
  "description": "Node.js wrapper for Dropbox Datastore API",
  "main": "src/dropbox-datastore-node.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha -w -t 3000"
  },
  "dependencies": {
    "mocha": "*"
  },
  "keywords": [
    "dropbox",
    "datastore",
    "api",
    "storage",
    "database",
    "node"
  ],
  "author": {
    "name": "Daniele Piccone"
  },
  "license": "MIT",
  "readme": "#Node.js wrapper for Dropbox Datastore API\n\n###Usage\n\n```\nvar DropboxDatastore = require('../src/dropbox-datastore-node');\nvar options = {\n        app_key: '...',\n        app_secret: '...',\n        response_type: 'code',\n        redirect_uri: 'http://localhost:3000/' // The / is the path and is required\n    };\nvar datastore = new DropboxDatastore(options);\n```\n\n###Methods\n\ndatastore.getInfo(fn(data));\n\ndatastore.listDatastore(fn(data));\n\ndatastore.getCreateDatastore(NAME,fn(data));\n\ndatastore.retrieveSnapshot(HANDLE,fn(data));\n\ndatastore.putDelta(HANDLE,CHANGES,fn(data));\n\ndatastore.deleteDatastore(HANDLE,fn(data));\n\n###Testing\n\nThe test need the config file which contains the app key and secret.\nFor easy testing I also included an access token which is used for testing.\n\n```\nexports.options = {\n    app_key: '...',\n    app_secret: '...',\n    response_type: 'code',\n    redirect_uri: 'http://localhost:3000/' // The / is the path and is required\n};\n\nexports.test_token = 'y-8E3SDJgGMAAAAAAAAAAdOLY39769xtn9AUbLA1-jtwhEHGv2jHXs2m5X6FgddI'; // Test token\n```\n\n###TODO\nImplementing all the endpoint of the current API\nSimplyfying the put_delta endpoint to make CRUD operations easier\n",
  "readmeFilename": "readme.md",
  "_id": "dropbox-datastore-node@0.2.0",
  "dist": {
    "shasum": "67a38b0235311f09f14529a7121b164bbd093b75"
  },
  "_from": "dropbox-datastore-node@",
  "_resolved": "https://registry.npmjs.org/dropbox-datastore-node/-/dropbox-datastore-node-0.2.0.tgz"
}
